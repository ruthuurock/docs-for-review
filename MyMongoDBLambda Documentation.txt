MyMongoDBLambda Project Guide for Amazon Linux 2
Introduction
This guide details the development, deployment, and testing of an AWS Lambda function (MyMongoDBLambda) on an Amazon Linux 2 EC2 instance (ip-172-31-40-79) in the /root/lambda-mongodb-project/ directory. The function connects to MongoDB Atlas, inserts a document ({"message": "Hello from Lambda"}) into the test collection of the mydatabase database, retrieves it, and returns the result as JSON. The function is deployed using AWS SAM CLI and exposed via an API Gateway endpoint (/hello) for access in a web browser.
The project uses:

AWS Lambda: For serverless execution.
MongoDB Atlas: For the database (alternatively, EC2-hosted MongoDB).
API Gateway: To provide an HTTP endpoint.
AWS SAM CLI: For building, testing, and deploying.
Python 3.9: As the runtime.
Account: *********, region us-east-1.

This document includes all code, resolved errors, and instructions to replicate the project from scratch.
Prerequisites

EC2 Instance: Amazon Linux 2, accessible via SSH (e.g., t2.micro or larger).
IAM Role: lambda-role (arn:aws:iam::692859947295:role/lambda-role) with:
Trust policy for lambda.amazonaws.com.
Policies: AWSLambdaBasicExecutionRole, AmazonAPIGatewayInvokeFullAccess.


MongoDB Atlas:
Database: mydatabase, collection: test.
User credentials (e.g., myuser, 12345).
Network Access: Whitelist EC2 public IP or 0.0.0.0/0.


AWS Credentials: Configured for account 692859947295 in ~/.aws/credentials.

Setup
1. Update System
sudo yum update -y

2. Install AWS CLI
sudo yum install -y awscli
aws --version


Configure credentials:aws configure


Access Key ID, Secret Access Key, Region: us-east-1, Output: json.



3. Install AWS SAM CLI
curl -L https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip -o sam.zip
unzip sam.zip -d sam-installation
sudo ./sam-installation/install
sam --version
rm -rf sam.zip sam-installation

4. Install Python 3.9
sudo yum install -y python39
python3.9 --version
sudo ln -sf /usr/bin/python3.9 /usr/local/bin/python3.9

5. Install Docker
sudo yum install -y docker
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker ec2-user
sudo usermod -aG docker root
docker --version

6. Create Project Directory
mkdir -p /root/lambda-mongodb-project
cd /root/lambda-mongodb-project

Project Structure
Create the following files:

template.yaml: Defines the Lambda function and API Gateway.
lambda_function.py: Implements the Lambda handler.
samconfig.toml: Stores SAM deployment settings.
event.json: Input for local testing.
pymongo/: Directory for pymongo dependencies.

Final Code
template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  MyMongoDBLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: .
      MemorySize: 128
      Timeout: 30
      Role: arn:aws:iam::692859947295:role/lambda-role
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /hello
            Method: GET


Purpose: Defines the MyMongoDBLambda function and a GET endpoint at /hello.
Notes:
Runtime: Python 3.9 (use python3.7 if preferred).
Role: Must exist and have necessary permissions.
Events: Creates an API Gateway endpoint.



lambda_function.py
import json
import pymongo
from pymongo import MongoClient
from bson import ObjectId

# Custom JSON encoder to handle ObjectId
class MongoDBEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, ObjectId):
            return str(obj)
        return super().default(obj)

def lambda_handler(event, context):
    # MongoDB connection string
    uri = "mongodb+srv://myuser:12345@mycluster.z5qgop7.mongodb.net/mydatabase?retryWrites=true&w=majority&appName=MyCluster"  # Replace with actual credentials
    
    try:
        client = MongoClient(uri, serverSelectionTimeoutMS=5000)
        db = client['mydatabase']
        collection = db['test']
        collection.insert_one({"message": "Hello from Lambda"})
        result = collection.find_one({"message": "Hello from Lambda"})
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': 'Connected to MongoDB',
                'data': result
            }, cls=MongoDBEncoder),
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'  # Enable CORS
            }
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)}),
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            }
        }
    finally:
        client.close()


Purpose: Connects to MongoDB, performs insert and find operations, and returns JSON.
Notes:
Replace uri with your MongoDB Atlas credentials or EC2 MongoDB URI (e.g., mongodb://myuser:12345@<ec2-public-ip>:27017/mydatabase?authSource=mydatabase).
MongoDBEncoder handles ObjectId serialization.
serverSelectionTimeoutMS=5000 prevents connection timeouts.
CORS headers enable browser access.



samconfig.toml
version = 0.1
[default]
[default.deploy]
[default.deploy.parameters]
stack_name = "my-mongodb-lambda-stack"
s3_bucket = "aws-sam-cli-managed-default-samclisourcebucket-evpouqwcqeiv"
s3_prefix = "my-mongodb-lambda-stack"
region = "us-east-1"
capabilities = "CAPABILITY_IAM"


Purpose: Configures SAM deployment settings.
Notes:
Ensures correct stack name and region.
Uses existing S3 bucket for SAM artifacts.



event.json
{}


Purpose: Provides input for local testing with sam local invoke.

Install Dependencies
Install pymongo:
cd /root/lambda-mongodb-project
/usr/local/bin/pip3.9 install pymongo -t .

Errors and Fixes
The following errors were encountered and resolved:

Syntax Error in lambda_function.py:
Error: Unquoted MongoDB URI (e.g., uri = mongodb+srv://...) caused a syntax error.
Fix: Added quotes around the URI (uri = "mongodb+srv://...").


Missing Dependencies and Files:
Error: Lacked pymongo, Docker, Python 3.9, and event.json.
Fix:
Installed pymongo: /usr/local/bin/pip3.9 install pymongo -t ..
Installed Docker: sudo yum install -y docker.
Installed Python 3.9: sudo yum install -y python39.
Created event.json: echo '{}' > event.json.




JSON Serialization Error:
Error: Object of type ObjectId is not JSON serializable when returning MongoDB query results.
Fix: Added MongoDBEncoder class to convert ObjectId to strings in lambda_function.py.


Invalid Stack Name:
Error: ValidationError for my-mongodb-lambda-stack]-d6066f68-CompanionStack in aws cloudformation describe-stacks.
Fix: Corrected stack name to my-mongodb-lambda-stack in samconfig.toml and commands.


ResourceNotFoundException:
Error: Function not found: arn:aws:lambda:us-east-1:692859947295:function:MyMongoDBLambda during aws lambda invoke.
Fix: Deployed the function with sam deploy.


Function Name Mismatch:
Error: MongoDBLambda not found. Possible options: ['MyMongoDBLambda'] in sam local invoke or aws lambda invoke.
Fix: Used correct function name (MyMongoDBLambda) in commands.


Timeout Error:
Error: Function 'MyMongoDBLambda' timed out after 30 seconds in sam local invoke.
Fix: Added serverSelectionTimeoutMS=5000 to MongoClient and verified MongoDB connectivity.


Missing API Gateway Configuration:
Error: Template does not have any APIs connected to Lambda functions in sam local start-api or sam deploy.
Fix: Added Events section with Type: Api in template.yaml.



Instructions
1. Test MongoDB Connection
Verify connectivity:
/usr/local/bin/python3.9 -c "from pymongo import MongoClient; client = MongoClient('mongodb+srv://myuser:12345@mycluster.z5qgop7.mongodb.net/mydatabase?retryWrites=true&w=majority&appName=MyCluster', serverSelectionTimeoutMS=5000); print(client.server_info())"


EC2 MongoDB (if used):/usr/local/bin/python3.9 -c "from pymongo import MongoClient; client = MongoClient('mongodb://myuser:12345@<ec2-public-ip>:27017/mydatabase?authSource=mydatabase', serverSelectionTimeoutMS=5000); print(client.server_info())"


Expected: MongoDB server info (e.g., version).
If Fails: Check credentials, Atlas Network Access, or EC2 security group (port 27017).

2. Local Testing
CLI Testing
cd /root/lambda-mongodb-project
sam build
sam local invoke MyMongoDBLambda -e event.json


Expected Output:{
  "statusCode": 200,
  "body": "{\"message\": \"Connected to MongoDB\", \"data\": {\"_id\": \"some-object-id\", \"message\": \"Hello from Lambda\"}}",
  "headers": {
    "Content-Type": "application/json",
    "Access-Control-Allow-Origin": "*"
  }
}



API Testing
sam local start-api


Access in Browser:
Local: http://127.0.0.1:3000/hello.
Remote: http://<ec2-public-ip>:3000/hello (ensure port 3000 is open in the EC2 security group).


Expected Output:{
  "message": "Connected to MongoDB",
  "data": {
    "_id": "some-object-id",
    "message": "Hello from Lambda"
  }
}



3. Deployment
sam deploy


If Issues:sam deploy --guided


Stack Name: my-mongodb-lambda-stack.
Region: us-east-1.
Confirm Changes: Y.
Allow IAM Role Creation: Y.
Save to samconfig.toml: Y.



4. Verify Deployment
aws lambda list-functions --region us-east-1 | grep MyMongoDBLambda
aws cloudformation describe-stacks --stack-name my-mongodb-lambda-stack --region us-east-1
aws apigateway get-rest-apis --region us-east-1

5. Access in Web Browser
Get API Endpoint
aws cloudformation describe-stacks \
  --stack-name my-mongodb-lambda-stack \
  --region us-east-1 \
  --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
  --output text


Expected:https://<api-id>.execute-api.us-east-1.amazonaws.com/Prod/hello



Open in Browser

Navigate to: https://<api-id>.execute-api.us-east-1.amazonaws.com/Prod/hello.
Expected Output:{
  "message": "Connected to MongoDB",
  "data": {
    "_id": "some-object-id",
    "message": "Hello from Lambda"
  }
}



Troubleshooting

MongoDB Connection:
Verify:/usr/local/bin/python3.9 -c "from pymongo import MongoClient; client = MongoClient('your-uri', serverSelectionTimeoutMS=5000); print(client.server_info())"


Atlas: Ensure Network Access allows EC2 IP.
EC2: Check mongod status and port 27017.


Timeout:
Increase Timeout in template.yaml (e.g., Timeout: 60).
Verify MongoDB connectivity.


Deployment Issues:
Check:aws cloudformation describe-stack-events --stack-name my-mongodb-lambda-stack --region us-east-1




API Errors:
Verify API deployment:aws apigateway get-stages --rest-api-id <api-id> --region us-east-1


Check Lambda logs:aws logs tail /aws/lambda/MyMongoDBLambda --region us-east-1





Notes

MongoDB: Update the uri in lambda_function.py with actual credentials. For EC2 MongoDB, ensure port 27017 is open.
Python: Uses Python 3.9. For 3.7, update Runtime in template.yaml.
Security: The API is public. For production, add API keys or IAM authentication.
IAM Role: Ensure lambda-role has necessary permissions.

